using ArchitecturalDecisionRecords;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CodeActions;
using Microsoft.CodeAnalysis.CodeFixes;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;
using System.Composition;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;


namespace ArchitetcturalDecisionRecords
{
    [ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(ArchitecturalDecisionRecordsCodeFixProvider)), Shared]
    public class ArchitecturalDecisionRecordsCodeFixProvider : CodeFixProvider
    {
        public sealed override ImmutableArray<string> FixableDiagnosticIds
        {
            get { return ImmutableArray.Create(ArchitecturalDecisionRecordsAnalyzer.DiagnosticId); }
        }

        public sealed override FixAllProvider GetFixAllProvider()
        {
            // See https://github.com/dotnet/roslyn/blob/master/docs/analyzers/FixAllProvider.md for more information on Fix All Providers
            return WellKnownFixAllProviders.BatchFixer;
        }

        public sealed override async Task RegisterCodeFixesAsync(CodeFixContext context)
        {
            var root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);

            // TODO: Replace the following code with your own analysis, generating a CodeAction for each fix to suggest
            var diagnostic = context.Diagnostics.First();
            var diagnosticSpan = diagnostic.Location.SourceSpan;

            // Find the trivia representing the ADR
            var triviaContainingAdr = root.FindTrivia(diagnosticSpan.Start);
                //.GetStructure().ChildNodes()
                //.OfType<XmlElementSyntax>()
                //.Where(i => i.StartTag.Name.ToString().Equals(AdrSchema.AdrRootName));

            // Register a code action that will invoke the fix.
            context.RegisterCodeFix(
                CodeAction.Create(
                    title: CodeFixResources.CorrectAdrFormat,
                    createChangedDocument: c => CorrectlyFormatAdr(context.Document, triviaContainingAdr, c),
                    equivalenceKey: nameof(CodeFixResources.CorrectAdrFormat)),
                diagnostic);
        }

        private async Task<Document> CorrectlyFormatAdr(Document document, SyntaxTrivia syntaxTrivia, CancellationToken cancellationToken)
        {
            /* // generate adr template
             XmlSampleGenerator generator = new XmlSampleGenerator(AdrSchema.Instance, new System.Xml.XmlQualifiedName("adr"));

             var newAdr = new XmlDocument();
             using (XmlWriter writer = newAdr.CreateNavigator().AppendChild())
             {
                 generator.WriteXml(writer);
             }

             var newAdrTree = CSharpSyntaxTree.ParseText(newAdr.ToString());

             //TODO - this should go away and be replaced by something generated by the sample xmls*/

            var rewriter = new AdrSyntaxRewriter();
            var root = await document.GetSyntaxRootAsync(cancellationToken);
            root = root.ReplaceTrivia(syntaxTrivia, rewriter.VisitTrivia(syntaxTrivia));

           
            return document;
        }
    }
}
